type List a =
  | Nil
  | Cons a (List a)

def rec fold_list : (a -> b -> b) -> List a -> b -> b =
  fun f l e -> match l with
  | Nil -> e
  | Cons x xs -> f x (fold_list f xs e)

def rec len = fun l -> match l with
    | Nil -> 0
    | Cons _ xs -> 1 + len xs

def rec sum = fun l -> match l with
    | Nil -> 0
    | Cons x xs -> x + sum xs

def rec map = fun f l -> match l with
    | Nil -> Nil
    | Cons x xs -> Cons (f x) (map f xs)

def one_two_three = Cons 1 (Cons 2 (Cons 3 Nil))

def rec count_down = fun n -> match n with
    | 0 -> Nil
    | n -> Cons n (count_down (n + -1))

def first_100 = count_down 100

def plus5_list = let n = 5 in let f = fun x -> x + n in map f

def result = sum (plus5_list first_100)
