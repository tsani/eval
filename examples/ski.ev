type Nat =
  | Z
  | S Nat

def z = Z

def k = fun x -> fun y -> x
def i = fun x -> x
def s = fun f1 -> fun f2 -> fun x -> f1 x (f2 x)

def true = k
def false = s k

type List a =
  | Nil
  | Cons a (List a)

def rec fold_list : (a -> b -> b) -> List a -> b -> b =
  fun f -> fun l -> fun e -> match l with
  | Nil -> e
  | Cons x xs -> f x (fold_list f xs e)

def rec plus : Nat -> Nat -> Nat =
  fun n -> fun m -> match n with
  | Z -> m
  | S n -> plus n (S m)

def rec times : Nat -> Nat -> Nat =
  fun n -> fun m -> match n with
  | Z -> Z
  | S n -> plus m (times n m)

def map : (a -> b) -> List a -> List b =
  fun f -> fun l -> fold_list (fun x -> Cons (f x)) l Nil

def sum_list : List Nat -> Nat =
  fun l -> fold_list plus l Z

def rec double : Nat -> Nat =
  fun n -> match n with
  | Z -> Z
  | S n -> S (S (double n))

def two = S (S Z)

def four = double two

def rec halve = fun n -> match n with
  | Z -> Z
  | S Z -> Z
  | S (S n) -> S (halve n)

def half_of_four = halve four

type Unit =
  | U

def rec list_eq : (a -> a -> Bool) -> List a -> List a -> Bool =
  fun eq l1 l2 ->
  match l1 with
  | Nil -> (match l2 with
    | Nil -> true
    | _ -> false)
  | Cons x xs -> match l2 with
    | Nil -> false
    | Cons y ys -> match eq x y with
      | true -> list_eq eq xs ys
      | false -> false

def rec nat_eq = fun n m ->
  match n with
  | Z -> (match m with
    | Z -> true
    | _ -> false)
  | S n -> (match m with
    | Z -> false
    | S m -> nat_eq n m)

def length = fun l -> fold_list (fun x -> fun len -> S len) l Z

def rec replicate =
  fun n x -> match n with
  | Z -> Nil
  | S n -> Cons x (replicate n x)

def rec oops : a -> b = fun x -> oops x

def four_fours = replicate four four

def sixteen = double (double four)

def test1 = list_eq nat_eq four_fours (replicate four four)

def five = S (S (S (S (S Z))))

def list_of_lists = replicate five four_fours

def sums = map sum_list list_of_lists

def rec forall = fun p l -> match l with
  | Nil -> true
  | Cons x xs ->
    match p x with
    | true -> forall p xs
    | false -> false

def test2 = forall (nat_eq sixteen) sums

type Exp =
  | Var Nat
  | App Exp Exp
  | Lam Exp
  | Clo (List Exp) Exp

def rec index = fun n l -> match n with
  | Z -> (match l with
    | Cons x _ -> x)
  | S n -> (match l with
    | Cons _ xs -> index n xs)

def rec eval : List Exp -> Exp -> Exp =
  fun env e -> match e with
  | Var i -> index i env
  | App e1 e2 -> (match eval env e1 with
    | Clo env1 body ->
      let v = eval env e2 in
      eval (Cons v env1) body)
  | Lam e -> Clo env e
  | Clo env e -> Clo env e

def self_app = Lam (App (Var Z) (Var Z))
def omega = fun u -> eval Nil (App self_app self_app)